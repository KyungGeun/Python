# 문자열: 문자나 정수 등을 ''나 ""으로 감싼 자료형
# 수정이 불가능한 자료형(immutable data type) => 메소드 사용시 변수에 대입해줘야 한다.
# 반복 가능한(iterable) 자료형

# 작은 따옴표를 출력하고 싶을때: print(" I'm learning Python ") or print(" I\'m learning Python")
# 큰 따옴표를 출력하고 싶을 때: print('그녀가 물었다. "저기요"') or print("그녀가 물었다. \"저기요\"")
i = 5
s = str(i)          # str()을 활용하여 자료형을 문자열로 변환
print(s, type(s))   # 출력: 5 <class 'str'>

# 포매팅
sexagenary_cycle = '갑진년'
year = 2024
print('올해는 {}년이고, {}입니다.'.format(year,sexagenary_cycle))    # 1
print('올해는 %d년이고, %s입니다' % (year,sexagenary_cycle)) # 2
print(f'올해는 {year}년이고, {sexagenary_cycle}입니다.') # 3
# 1, 2, 3의 출력값: 올해는 2024년이고, 갑진년입니다.

# 개행문자
# | \b | 백스페이스
# | \n | 새 행
# | \t | 탭
# | \v | 수직 탭
# | \\ | 백슬래시
# | \' | 작은따옴표
# | \" | 큰따옴표

# 덧셈 곱셈이 가능하다.
a = "Hello"
b = "Python"
print(a+b) # 출력값: "HelloPython"
print(a + ' ' + b + '!') # 출력값: "Hello Python!"
five = '5'
print(five * 5) # 출력값: '55555'

# 문자열, 리스트, 튜플 등은 인덱스 번호가 존재하므로 인덱싱과 슬라이싱을 사용할 수 있다.
string = 'string'
# 인덱싱: 인덱스(원소의 위치, 0부터 시작)로 원소값을 호출
print(string[0], string[2], string[4])  # 출력값: s r n
print(string[-1])   # 출력값: g, 인덱스가 음수일 경우, 뒤에서부터 읽는다.
# 슬라이싱: 범위를 잘라낸다는 의미 문자열[시작:끝:증가]
# 기본으로 시작 인덱스는 0, 끝 인덱스는 끝, 증가 인덱스는 1로 설정돼 있다.
print(string[::])   # 출력값: string
print(f'슬라이싱:{string[2:5]}, 인덱싱: {string[5]}')  # 출력값: rin, string[5]는 g인데, n까지 범위에 속하는 이유는 끝 인덱스는 끝 인덱스의 전까지 범위에 포함하기 때문
print(string[-2:0:-1])  # 출력값: nirt
print(string[-5:-3:-1]) # 출력값: 없음, 왜냐하면 시작하는 문자가 s 끝나는 문자가 i, 진행방향은 음수이기 때문에 R->L 이렇게 되면 범위에 포함되는 문자가 없기 때문에 출력하면 어떠한 값도 안 나오는 것이다

# 문자열 관련 함수 ([]로 묶여 있을 경우 생략이 가능한 부분)

s = 'Hello Python'
# count(x:str,[start,[end]]) 문자열에서 사용시, 첫번째 인자값은 문자열만 올 수 있다.
print(s.count('o',2,7)) # 출력값: 1 해당 문자의 개수 반환
# # find(sub:str[start,[end]])
print(s.find('l',3,8)) # 출력값: 3 해당 문자의 시작 인덱스 반환,
print(s.find('H',3,8)) # 출력값: 없는값을 찾을시 -1 반환
print(s.index('l',3,8)) # 출력값: 2 해당 문자의 시작 인덱스 반환
# print(s.index('H',3,8))
# => ValueError: substring not found
# => 값 오류: 부분 문자열이 발견되지 않음

# join(iterable[str]) 해당 문자를 인덱스 사이사이에 추가한 값을 반환
# 대표적으로 iterable한 타입 - list, dict, set, str, bytes, tuple, range
print('/'.join(s)) # 출력: H/e/l/l/o/ /P/y/t/h/o/n

t = 'oxoxoxoxoxox'
# replace(old, new,[count]) old문자를 new문자로 치환한 값을 반환
print(f't:{t}, replace: {t.replace('xo','|',5)}') # 출력값: t:oxoxoxoxoxox, replace: o|||||x
# split([sep]) 해당 문자를 기준으로 문자열을 나누어서 리스트타입으로 반환

string = ('str    ing')
print(string.split(' '))    # 출력값: ['str', '', '', '', 'ing']
print(string.split())   # 출력값: ['str', 'ing']
string2 = 'Hello_python'
print(string2.split('_'))   # 출력값: ['Hello', 'python']
# ()안이 비어있을 경우 공백을 기준으로 분리하지만 연속된 공백을 하나의 공백으로 처리하기에
# ()안에 공백을 넣어서 출력하는 값과 다르다는 점을 알 수 있다.

# capitalize(): 문자열의 첫 문자를 대문자로, 첫 문자 이외에 문자는 소문자로 변환
print(f'b: {b}, capitalize: {b.upper().capitalize()}') # 출력값: b: python, capitalize: Python
print(b.capitalize())   # 출력값: Python
# upper(): 문자열을 대문자로 변환후 반환
print(s.upper()) # 출력값: HELLO PYTHON
# isupper(): 문자열의 모든 문자가 대문자인지 확인
print(s.isupper())  # 출력값: False

# lower(): 문자열을 소문자로 변환 후 반환
print(s.lower()) # 출력값: hello python
# islower(): 문자열의 모든 문자가 소문자인지 확인
print(s.islower())  # 출력값: False

i = '123'
j = '456'
# isdigit(): 문자열의 모든 문자가 정수인지 확인
print(i, i.isdigit())  # 출력값: 123 True
# isnumeric(): 문자열의 모든 문자가 정수인지 확인
print(j, j.isnumeric())    # 출력값: 456 True
# isalnum(): 문자열의 모든 문자가 알파벳 또는 숫자인지 확인
str_num = 'abc123'
print(str_num, str_num.isalnum())   # 출력값: abc123 True
# strip([char]) 문자열에서 연속되는 해당 문자를 제거 후 반환
t = "....app.le...."
print('|', t.lstrip('.'), '|', sep="") # 출력: |app.le....|
print('|', t.strip('.'), '|', sep="")  # 출력: |app.le|
print('|', t.rstrip('.'), '|', sep="") # 출력: |....app.le|

# len() 문자열 길이 구하기
print(len(s)) # 출력: 12
