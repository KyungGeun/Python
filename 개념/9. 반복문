# 반복문(while): 조건이 만족될 때 까지 반복
i = 1
while i <= 5:       # 조건이 참인지 확인
    print(i)        # 조건이 참인 경우 실행, 출력: 1, 2, 3, 4, 5
    i += 1          # i를 증가

# 무한 반복
i = 5
while i < 10:
    print(i)        # 출력: -1254677(조건문이 계속 참이므로 이보다 더 작을 수도 있다.)
    i -= 1
    if i < -10:
        break
i = 0
while True:         # 조건자체가 참 이므로 무한 반복
    i += 1
    if i == 10:
        break       # break = 반복문을 탈출
    if i % 2 == 0:
        continue    # contine = 밑의 실행문을 건너뛰고 다음 반복으로 넘어간다.
    print(i)        # 출력: 1, 3, 5, 7, 9

# 반복문(for) 몇 회 동안 반복

# for 변수명 in 숫자형을 제외한 자료형 + range():
#     실행문
# in 뒤에 있는 자료형의 원소를 차례대로 변수에 대입한다.
# 반복횟수는 자료형의 원소 갯수와 같다

string = 'Python'
for s in string:
    print(s) # 출력: P, y, t, h, o, n

LIST = list('Python')
for l in LIST:
    print(l) # 출력: P, y, t, h, o, n

DICT = dict(zip('abcde', range(1,6)))
for k in DICT.keys():
    print(k) # 출력: a, b, c, d, e
# 딕셔너리명.keys()를 in 뒤에 쓰면 변수명에 딕셔너리의 키값들을 차례대로 대입
for v in DICT.values():
    print(v) # 출력: 1, 2, 3, 4, 5
# 딕셔너리명.values()를 in 뒤에 쓰면 변수명에 딕셔너리의 벨류값들을 차례대로 대입
for key, value in DICT.items():
    print(key, value) # 출력: a 1, b 2, c 3, d 4, e 5
# 딕셔너리명.items()를 in 뒤에 쓰면 변수명1과 변수명2에 딕셔너리의 키값과 벨류값을 차례대로 대입
# 딕셔너리명.item()처럼 한 번에 2가지를 대입시키는 내장함수가 존재하는데, 그것은 enumerate함수이다.
# enumerate함수는 순서가 있는 자료형을 입력받고, 인덱스 값을 포함하는 객체를 반환한다.
for i, s in enumerate(string):
    print(i, s) # 출력: 0 p, 1 y, 2 t, 3 h, 4 o, 5 n

SET = set('python')
for S in SET: # 집합은 순서가 없는 자료형이므로 S에 무작위로 집합의 원소를 대입
    print(S) # 출력: h, y, n, o, t, p

# range(a): 0~a전까지의 정수값들을 나열하는 자료형
# range(a,b): a~b전까지의 정수값들을 나열하는 자료형
# range(a,b,c): a~b전까지 정수값들을 c만큼 증가시켜서 나열하는 자료형
# range()와 슬라이싱의 방식은 동일하다.
# a, b, c는 정수

for i in range(5):
    print(i) # 출력: 0, 1, 2, 3, 4

for i in range(1,6):
    print(i) # 출력: 1, 2, 3, 4, 5

for i in range(1,10,2):
    print(i) # 출력: 1, 3, 5, 7, 9

for i in range(5,0,-1):
    print(i) # 출력: 5, 4, 3, 2, 1
